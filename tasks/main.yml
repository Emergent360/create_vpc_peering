---
# tasks file for create_vpc_peering
- name: Get the VPC ID for default-vpc
  ec2_vpc_net_info:
    filters:
      "tag:Name": "default-vpc"
    region: "{{ ec2_region }}"
  register: default_vpc_net_facts

- name: Get the VPC ID for {{ ec2_name_prefix }}-vpc
  ec2_vpc_net_info:
    filters:
      "tag:Name": "{{ ec2_name_prefix }}-vpc"
    region: "{{ ec2_region }}"
  register: peer_vpc_net_facts

- name: Get route table info for default-vpc
  ec2_vpc_route_table_info:
    region: "{{ ec2_region }}"
    filters:
      vpc_id: "{{ default_vpc_net_facts.vpcs[0].id }}"
  register: default_route_table_facts

- name: Get route table info for {{ ec2_name_prefix }}-vpc
  ec2_vpc_route_table_info:
    region: "{{ ec2_region }}"
    filters:
      vpc_id: "{{ peer_vpc_net_facts.vpcs[0].id }}"
  register: peer_route_table_facts

- name: Get {{ ec2_name_prefix }} route table id
  set_fact:
    rtb_id: "{{ peer_route_table_facts.route_tables
      | json_query(\"[?tags.Name=='{{ ec2_name_prefix }}-RouteTable']\")
      | map(attribute='id')
      | list
      | unique }}"

- name: Get subnets for AD DS domain controllers
  command: >
    aws ds describe-directories
      --output json
      --query 'DirectoryDescriptions[?Name==`empire.lab-emergent360.com`].{SubnetIds:VpcSettings.SubnetIds}'
      --region "{{ ec2_region }}"
  changed_when: false
  register: ds_query

- name: Set subnet ids list
  set_fact:
    empire_ds_subnets: "{{ (ds_query.stdout | from_json)[0].SubnetIds }}"

- name: "Create local VPC peering connection"
  ec2_vpc_peer:
    region: "{{ ec2_region }}"
    peer_vpc_id: "{{ default_vpc_net_facts.vpcs[0].id }}"
    vpc_id: "{{ peer_vpc_net_facts.vpcs[0].id }}"
    state: present
  register: vpc_peer

- name: "Accept local VPC peering connection"
  ec2_vpc_peer:
    region: "{{ ec2_region }}"
    peering_id: "{{ vpc_peer.peering_id }}" 
    state: accept
  register: accept_peer

- name: "Create route table entries to default-vpc"
  ec2_vpc_route_table:
    vpc_id: "{{ peer_vpc_net_facts.vpcs[0].id }}"
    region: "{{ ec2_region }}"
    lookup: id
    purge_subnets: false
    purge_routes: false
    route_table_id: "{{ rtb_id }}"
    subnets: "{{ empire_ds_subnets }}"
    routes:
      - dest: 172.31.0.0/20
        vpc_peering_connection_id: "{{ vpc_peer.peering_id }}"
      - dest: 172.31.16.0/20
        vpc_peering_connection_id: "{{ vpc_peer.peering_id }}"

- name: "Get subnet info for {{ ec2_name_prefix }}-vpc"
  ec2_vpc_subnet_info:
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ peer_vpc_net_facts.vpcs[0].id }}"
  register: peer_subnet_info

- name: Get subnet ids
  set_fact:
    subnet_ids: "{{ peer_subnet_info.subnets
      | selectattr('id', 'defined')
      | map(attribute='id')
      | list
      | unique }}"

- name: Get subnet cidrs
  set_fact:
    subnet_cidrs: "{{ peer_subnet_info.subnets
      | selectattr('cidr_block', 'defined')
      | map(attribute='cidr_block')
      | list
      | unique }}"

- name: "Create route table entries to {{ ec2_name_prefix }}-vpc"
  ec2_vpc_route_table:
    vpc_id: "{{ default_vpc_net_facts.vpcs[0].id }}"
    region: "{{ ec2_region }}"
    lookup: id
    purge_subnets: false
    purge_routes: false
    route_table_id: "{{ default_route_table_facts.route_tables[0].id }}"
    subnets: "{{ subnet_ids }}"
    routes:
      - dest: "{{ item }}"
        vpc_peering_connection_id: "{{ vpc_peer.peering_id }}"
  loop: "{{ subnet_cidrs }}"
